# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'ACRTechTest' 
  kubernetesServiceConnection: 'AKSTechTest-test' # -aksTechTest3-test-1595160000983'

  imageRepository: 'techtestapp'
  containerRegistry: 'acrtechtest4.azurecr.io' # look for this acr in manifests and replace tag with this build id
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acrtechtest-secret'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build and publish container
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

  - job: Package
    displayName: Package manifests
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: PowerShell@2
      displayName: Update manifests with ACR name
      inputs:
        targetType: inline
        script: |
          ls $(Build.SourcesDirectory)/manifests/app*.yml | %{ $f=$_; (gc $f.FullName) | %{ $_ -replace "image: $(imageRepository)", "image: $(containerRegistry)/$(imageRepository)" } | Set-Content $f.FullName }

    - task: PublishPipelineArtifact@1
      displayName: Publish manifest artifacts
      inputs: 
        targetPath: manifests


- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy to Test Env
    pool:
      vmImage: $(vmImageName)
    environment: 'techtest-test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              namespace: test
              secretType: dockerRegistry
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy Postgres to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: test
              manifests: |
                $(Pipeline.Workspace)/manifests/postgres-config.yml  
                $(Pipeline.Workspace)/manifests/postgres-volumes.yml
                $(Pipeline.Workspace)/manifests/postgres-service.yml
                $(Pipeline.Workspace)/manifests/postgres-deployment.yml

          - task: KubernetesManifest@0
            displayName: Run UpdateDB to seed data
            inputs:
              action: deploy
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: test
              manifests: |
                $(Pipeline.Workspace)/manifests/app-updatedb.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: KubernetesManifest@0
            displayName: Deploy App to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: test
              manifests: |
                $(Pipeline.Workspace)/manifests/app-deployment.yml
                $(Pipeline.Workspace)/manifests/app-service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

